#!/bin/sh -e

echo "This script remains for reference for cross-builds of a handful of libraries"
echo "To build other external libraries, see the leapmotion/external-libraries repo"
if [ "$ARCH" = "arm32" ]; then
  export CROSS_COMPILE=arm-linux-gnueabihf-
  INSTALL_DIR=/opt/local/Libraries-arm32
elif [ "$ARCH" = "arm64" ]; then
  export CROSS_COMPILE=aarch64-linux-gnu-
  INSTALL_DIR=/opt/local/Libraries-arm64
else
  INSTALL_DIR=/opt/local/Libraries-x64
fi

leap_build() {
  echo "$1 $2... "
  INSTALL_NAME=$(echo $1 | tr '[:upper:]' '[:lower:]')
  echo "'$4'"
  if [ ! -d ${INSTALL_DIR}/${INSTALL_NAME}-$2 ] || [ $4 ]; then
    echo "BUILDING"
    export $1_CHANGED=true
    echo $1_CHANGED
    if [ ! -d $1 ]; then
      git clone git@github.com:leapmotion/$1.git
      cd $1
    else
      cd $1
      git fetch
    fi
    git checkout v$2
    if [ "$ARCH" = "arm32" -o "$ARCH" = "arm64" ]; then
      if [ -d standard ]; then
        TOOLCHAIN=$(pwd)/standard/toolchain-${ARCH}.cmake
      else
        TOOLCHAIN=$(pwd)/toolchain-${ARCH}.cmake
      fi
    fi
    rm -fr build-v$2
    mkdir -p build-v$2
    cd build-v$2
    if [ "$ARCH" = "arm32" -o "$ARCH" = "arm64" ]; then
      cmake -DCMAKE_TOOLCHAIN_FILE=${TOOLCHAIN} \
            -DCMAKE_INSTALL_PREFIX=${INSTALL_DIR}/${INSTALL_NAME}-$2 \
            -DCMAKE_PREFIX_PATH:PATH=${INSTALL_DIR} \
            -DCMAKE_BUILD_TYPE=Release \
            -DZLIB_ROOT_DIR:PATH=${INSTALL_DIR}/zlib-1.2.8 \
            -DCURL_ROOT_DIR:PATH=${INSTALL_DIR}/curl-7.36.0 \
            -DBOOST_ROOT:PATH=${INSTALL_DIR}/boost_${BOOST_VERSION} \
            .. && make -j 4 && ./bin/$3 && sudo make install
    else
      cmake -DCMAKE_INSTALL_PREFIX=${INSTALL_DIR}/${INSTALL_NAME}-$2 \
            -DCMAKE_PREFIX_PATH:PATH=${INSTALL_DIR} \
            -DCMAKE_BUILD_TYPE=Release \
            -DZLIB_ROOT_DIR:PATH=${INSTALL_DIR}/zlib-1.2.8 \
            -DCURL_ROOT_DIR:PATH=${INSTALL_DIR}/curl-7.36.0 \
            -DBOOST_ROOT:PATH=${INSTALL_DIR}/boost_${BOOST_VERSION} \
            .. && make -j 4 && ./bin/$3 && sudo make install
    fi
    cd ../..
  else
    echo "(already installed)"
  fi
}

boost_build() {
  BOOST_VERSION_DOT=$1
  BOOST_VERSION=$(echo $1 | tr \. \_)
  echo "boost $1..."
  INSTALL_PATH=${INSTALL_DIR}/boost_${BOOST_VERSION}
  if [ ! -d ${INSTALL_PATH} ] || [ $2 ]; then
    echo "BUILDING"
    BOOST_TAR_PATH=boost_${BOOST_VERSION}.tar.bz2
    if [ ! -f $BOOST_TAR_PATH ]; then
      curl -sLO http://superb-sea2.dl.sourceforge.net/project/boost/boost/${BOOST_VERSION_DOT}/boost_${BOOST_VERSION}.tar.bz2
    fi
    rm -fr boost_${BOOST_VERSION}
    tar xfj $BOOST_TAR_PATH
    cd boost_${BOOST_VERSION}
    if [ "$ARCH" = "arm32" -o "$ARCH" = "arm64" ]; then
      if [ -f tools/build/v2/user-config.jam ]; then
        echo "using gcc : arm : ${CROSS_COMPILE}g++ ;" >> tools/build/v2/user-config.jam
      else
        echo "using gcc : arm : ${CROSS_COMPILE}g++ ;" >> tools/build/src/user-config.jam
      fi
      ./bootstrap.sh
      sudo ./b2 --prefix=${INSTALL_PATH} --build-dir=./tmp link=static threading=multi variant=release cflags=-fPIC cxxflags=-fPIC toolset=gcc-arm target-os=linux --without-mpi --without-python install
    else
      export PYTHON=python3
      export PYTHON_VERSION=$($PYTHON -c "import sys; print('{}.{}'.format(*sys.version_info))")

      sed -ibak "s,using python.*,using python : $PYTHON_VERSION : $(which $PYTHON) : $($PYTHON -c 'from __future__ import print_function; import distutils.sysconfig; print(distutils.sysconfig.get_python_inc(True))') : $($PYTHON -c 'from __future__ import print_function; import sys; print(sys.prefix)')/lib ;," bootstrap.sh
      ./bootstrap.sh
      sudo ./b2 --prefix=${INSTALL_PATH} --build-dir=./tmp python=$PYTHON_VERSION --with-python --with-atomic --with-chrono --with-date_time --with-filesystem --with-locale --with-program_options --with-thread --with-regex link=static threading=multi variant=release cflags=-fPIC cxxflags=-fPIC target-os=linux install
    fi
    cd ..
  else
    echo "(already installed)"
  fi
}

boost_build 1.64.0
leap_build "autowiring" 1.0.5 "AutowiringTest"
leap_build "leapserial" 0.5.1 "LeapSerialTest"

if [ $autowiring_CHANGED ] || [ $LeapSerial_CHANGED ]; then
 autowiring_LeapSerial_CHANGED=true
fi
leap_build "LeapResource" 0.1.3 "LeapResourceTest" $autowiring_LeapSerial_CHANGED
leap_build "LeapHTTP" 0.1.3 "LeapHTTPTest" $autowiring_CHANGED
leap_build "LeapIPC" 0.1.7 "LeapIPCTest" $autowiring_LeapSerial_CHANGED
